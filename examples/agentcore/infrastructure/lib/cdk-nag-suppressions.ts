import { NagSuppressions } from "cdk-nag";
import { Stack } from "aws-cdk-lib";
import * as cdk from "aws-cdk-lib";

/**
 * Centralized CDK Nag suppressions for the AgentCore integration example.
 *
 * This is an example implementation for AgentCore agent and MCP server demonstration.
 * All suppressions in this module are justified for example/demonstration purposes
 * and prioritize simplicity and ease of testing over production-grade security.
 *
 * In production environments, these security features should be properly implemented
 * rather than suppressed. Each suppression includes specific justifications for why
 * the suppression is acceptable in this example context.
 */
export class CdkNagSuppressions {
  /**
   * Apply all CDK Nag suppressions to the given stack.
   * @param stack The stack to apply suppressions to
   */
  static applySuppressions(stack: Stack): void {
    this.suppressCognitoMfaRequirement(stack);
    this.suppressCognitoAdvancedSecurity(stack);
    this.suppressAwsManagedPolicies(stack);
    this.suppressCustomResourceWildcardPermissions(stack);
    this.suppressSecretsManagerRotation(stack);
    this.suppressNecessaryWildcardPermissions(stack);
  }

  /**
   * Suppress AwsSolutions-COG2: Cognito user pool doesn't require MFA
   */
  private static suppressCognitoMfaRequirement(stack: Stack): void {
    NagSuppressions.addResourceSuppressionsByPath(
      stack,
      `/${stack.stackName}/CognitoAuth/UserPool/Resource`,
      [
        {
          id: "AwsSolutions-COG2",
          reason:
            "MFA is disabled for simplicity and ease of testing. In production environments, " +
            "MFA should be enabled for enhanced security.",
        },
      ]
    );
  }

  /**
   * Suppress AwsSolutions-COG3: Cognito user pool doesn't have AdvancedSecurityMode set to ENFORCED
   */
  private static suppressCognitoAdvancedSecurity(stack: Stack): void {
    NagSuppressions.addResourceSuppressionsByPath(
      stack,
      `/${stack.stackName}/CognitoAuth/UserPool/Resource`,
      [
        {
          id: "AwsSolutions-COG3",
          reason:
            "Advanced Security Mode requires the Cognito Plus tier (additional cost) and complex " +
            "configuration of threat protection features including adaptive authentication and " +
            "compromised credentials detection. We prioritize simplicity and cost-effectiveness. " +
            "In production environments, AdvancedSecurityMode should be set to ENFORCED for " +
            "enhanced security against credential stuffing, brute force attacks, and suspicious sign-in attempts.",
        },
      ]
    );
  }

  /**
   * Suppress AwsSolutions-IAM4: Usage of AWS managed policies
   */
  private static suppressAwsManagedPolicies(stack: Stack): void {
    // Suppress AWS managed policies for Lambda execution roles
    const lambdaRolePaths = [
      `/${stack.stackName}/ClientUser/SetClientUserPasswordProviderHandler/ServiceRole/Resource`,
      `/${stack.stackName}/ClientUser/SetClientUserPasswordProvider/framework-onEvent/ServiceRole/Resource`,
      `/${stack.stackName}/McpServer/ExecutionRole/Resource`,
      `/${stack.stackName}/Agent/ExecutionRole/Resource`,
    ];

    lambdaRolePaths.forEach((path) => {
      NagSuppressions.addResourceSuppressionsByPath(stack, path, [
        {
          id: "AwsSolutions-IAM4",
          reason:
            "AWS managed policies like AWSLambdaBasicExecutionRole and AmazonECSTaskExecutionRolePolicy " +
            "are used for simplicity and are standard for Lambda and ECS execution roles. In production " +
            "environments, consider creating custom policies with minimal required permissions.",
          appliesTo: [
            "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
            "Policy::arn:<AWS::Partition>:iam::aws:policy/CloudWatchLambdaApplicationSignalsExecutionRolePolicy",
          ],
        },
      ]);
    });
  }

  /**
   * Suppress AwsSolutions-IAM5: Wildcard permissions in custom resource policies
   */
  private static suppressCustomResourceWildcardPermissions(stack: Stack): void {
    // Suppress for ClientUser custom resource
    NagSuppressions.addResourceSuppressionsByPath(
      stack,
      `/${stack.stackName}/ClientUser/SetClientUserPasswordProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource`,
      [
        {
          id: "AwsSolutions-IAM5",
          reason:
            "The wildcard permission is automatically generated by CDK's Custom Resource framework " +
            "to allow the provider to invoke the Lambda function with any qualifier (version/alias). " +
            "This is a standard CDK pattern for custom resources and is scoped to a specific Lambda " +
            "function ARN, making it secure for this use case.",
          appliesTo: [
            "Resource::<ClientUserSetClientUserPasswordProviderHandler08EDF56B.Arn>:*",
          ],
        },
      ]
    );
  }

  /**
   * Suppress AwsSolutions-SMG4: Secrets Manager automatic rotation not configured
   */
  private static suppressSecretsManagerRotation(stack: Stack): void {
    // Suppress for ClientUser credentials
    NagSuppressions.addResourceSuppressionsByPath(
      stack,
      `/${stack.stackName}/ClientUser/ClientUserCredentials/Resource`,
      [
        {
          id: "AwsSolutions-SMG4",
          reason:
            "The secret contains static client user credentials for invoking agent runtime with " +
            "JWT bearer tokens. Automatic rotation is not required for these demonstration " +
            "credentials and would add unnecessary complexity and cost. In production environments, " +
            "consider enabling automatic rotation for secrets containing sensitive production credentials.",
        },
      ]
    );
  }

  /**
   * Suppress AwsSolutions-IAM5: Necessary wildcard permissions for AWS service requirements
   */
  private static suppressNecessaryWildcardPermissions(stack: Stack): void {
    // Suppress ECR GetAuthorizationToken wildcard (AWS service requirement)
    const executionRolePaths = [
      `/${stack.stackName}/Agent/ExecutionRole/Resource`,
      `/${stack.stackName}/McpServer/ExecutionRole/Resource`,
    ];

    executionRolePaths.forEach((path) => {
      NagSuppressions.addResourceSuppressionsByPath(stack, path, [
        {
          id: "AwsSolutions-IAM5",
          reason:
            "ECR GetAuthorizationToken requires wildcard resource as per AWS service requirements. " +
            "Reference: https://docs.aws.amazon.com/AmazonECR/latest/userguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-access-one-bucket",
          appliesTo: ["Resource::*"],
        },
      ]);
    });

    // Suppress Foundation Models wildcard (global resources)
    NagSuppressions.addResourceSuppressionsByPath(
      stack,
      `/${stack.stackName}/Agent/ExecutionRole/Resource`,
      [
        {
          id: "AwsSolutions-IAM5",
          reason:
            "Bedrock foundation models are global AWS resources that cannot be scoped to specific regions. " +
            "The wildcard is required to access foundation models across all regions.",
          appliesTo: ["Resource::arn:aws:bedrock:*::foundation-model/*"],
        },
      ]
    );

    // Suppress CloudWatch with namespace condition (already well-scoped)
    NagSuppressions.addResourceSuppressionsByPath(
      stack,
      `/${stack.stackName}/Agent/ExecutionRole/Resource`,
      [
        {
          id: "AwsSolutions-IAM5",
          reason:
            "CloudWatch PutMetricData permission is already well-scoped with a condition that restricts " +
            "access to only the 'bedrock-agentcore' namespace. The resource wildcard is necessary for " +
            "CloudWatch metrics but is effectively limited by the namespace condition. " +
            "Reference: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/permissions-reference-cw.html",
          appliesTo: [
            `Resource::arn:aws:cloudwatch:${cdk.Stack.of(stack).region}:${
              cdk.Stack.of(stack).account
            }:*`,
          ],
        },
      ]
    );

    // Suppress remaining runtime endpoint wildcards (necessary for AgentCore functionality)
    NagSuppressions.addResourceSuppressionsByPath(
      stack,
      `/${stack.stackName}/Agent/ExecutionRole/Resource`,
      [
        {
          id: "AwsSolutions-IAM5",
          reason:
            "Runtime endpoint wildcard is necessary for AgentCore to invoke other runtime endpoints. " +
            "The permission is scoped to the specific account and region, and the wildcard allows " +
            "for dynamic runtime endpoint discovery and invocation.",
          appliesTo: [
            `Resource::arn:aws:bedrock-agentcore:${
              cdk.Stack.of(stack).region
            }:${cdk.Stack.of(stack).account}:runtime-endpoint/*`,
          ],
        },
      ]
    );

    // Suppress inference profile wildcards (necessary for Bedrock model access)
    NagSuppressions.addResourceSuppressionsByPath(
      stack,
      `/${stack.stackName}/Agent/ExecutionRole/Resource`,
      [
        {
          id: "AwsSolutions-IAM5",
          reason:
            "Inference profile wildcard is necessary for Bedrock model invocation. " +
            "Inference profiles are dynamically created and managed by AWS Bedrock, " +
            "requiring wildcard access within the account and region scope.",
          appliesTo: [
            `Resource::arn:aws:bedrock:${cdk.Stack.of(stack).region}:${
              cdk.Stack.of(stack).account
            }:inference-profile/*`,
          ],
        },
      ]
    );

    // Suppress tightened but still necessary wildcards for both Agent and MCP Server
    const agentMcpRolePaths = [
      `/${stack.stackName}/Agent/ExecutionRole/Resource`,
      `/${stack.stackName}/McpServer/ExecutionRole/Resource`,
    ];

    agentMcpRolePaths.forEach((path) => {
      NagSuppressions.addResourceSuppressionsByPath(stack, path, [
        // Note: Workload identity permissions are automatically handled by the
        // AWSServiceRoleForBedrockAgentCoreRuntimeIdentity Service-Linked Role
        // for agents created on or after October 13, 2025
        {
          id: "AwsSolutions-IAM5",
          reason:
            "CloudWatch Logs permissions are scoped to AgentCore-specific log groups, representing a " +
            "significant tightening from the previous broad log group wildcard. These patterns are " +
            "necessary for AgentCore runtime logging functionality.",
          appliesTo: [
            `Resource::arn:aws:logs:${cdk.Stack.of(stack).region}:${
              cdk.Stack.of(stack).account
            }:log-group:/aws/bedrock-agentcore/runtimes/*`,
            `Resource::arn:aws:logs:${cdk.Stack.of(stack).region}:${
              cdk.Stack.of(stack).account
            }:log-group:/aws/bedrock-agentcore/*`,
            `Resource::arn:aws:logs:${cdk.Stack.of(stack).region}:${
              cdk.Stack.of(stack).account
            }:log-group:/aws/bedrock-agentcore/*:log-stream:*`,
            `Resource::arn:aws:logs:${cdk.Stack.of(stack).region}:${
              cdk.Stack.of(stack).account
            }:log-group:*`,
          ],
        },
      ]);
    });

    // Suppress X-Ray tightened permissions (Agent only)
    NagSuppressions.addResourceSuppressionsByPath(
      stack,
      `/${stack.stackName}/Agent/ExecutionRole/Resource`,
      [
        {
          id: "AwsSolutions-IAM5",
          reason:
            "X-Ray permissions are scoped to trace and sampling-rule resources, representing a " +
            "significant tightening from the previous broad X-Ray wildcard. These specific resource " +
            "types are necessary for distributed tracing functionality.",
          appliesTo: [
            `Resource::arn:aws:xray:${cdk.Stack.of(stack).region}:${
              cdk.Stack.of(stack).account
            }:trace/*`,
            `Resource::arn:aws:xray:${cdk.Stack.of(stack).region}:${
              cdk.Stack.of(stack).account
            }:sampling-rule/*`,
          ],
        },
        {
          id: "AwsSolutions-IAM5",
          reason:
            "Service-Linked Role creation permission is required for AgentCore Identity service. " +
            "This is a specific AWS service requirement for agents created before October 13, 2025. " +
            "The wildcard in the account portion is required by AWS IAM for service-linked role creation.",
          appliesTo: [
            "Resource::arn:aws:iam::*:role/aws-service-role/runtime-identity.bedrock-agentcore.amazonaws.com/AWSServiceRoleForBedrockAgentCoreRuntimeIdentity",
          ],
        },
      ]
    );
  }
}
